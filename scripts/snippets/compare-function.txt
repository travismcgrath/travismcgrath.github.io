function compareFunction(a, b) {
			const sortMode = document.getElementById("sort-by").value;
			color_sort_order = ["W", "U", "B", "R", "G", "WU", "UB", "BR", "RG", "GW", "WB", "UR", "BG", "RW", "GU", "WUB", "UBR", "BRG", "RGW", "GWU", "RWB", "GUR", "WBG", "URW", "BGU", "WUBR", "UBRG", "BRGW", "RGWU", "GWUB", "WUBRG", ""];

			if (a.rarity.includes("masterpiece") && !b.rarity.includes("masterpiece"))
			{
				return 1;
			}

			if (!a.rarity.includes("masterpiece") && b.rarity.includes("masterpiece"))
			{
				return -1;
			}

			if (a.shape.includes("token") && !b.shape.includes("token"))
			{
				return 1;
			}

			if (!a.shape.includes("token") && b.shape.includes("token"))
			{
				return -1;
			}
			
			if (sortMode == 'set-code')
			{
				if (a.set === b.set)
				{
					if (a.number === b.number)
					{
						return 0;
					}
					else {
						return (a.number < b.number) ? -1 : 1;
					}
				}
				else {
					return (a.set < b.set) ? -1 : 1;
				}
			}
			if (sortMode == 'name')
			{
				if (a.card_name === b.card_name)
				{
					return 0;
				}
				else {
					return (a.card_name < b.card_name) ? -1 : 1;
				}
			}
			if (sortMode == 'mv')
			{
				//since cost is now formatted like {1}{U} instead of 1U, we need to remove the brackets from the string first
				//CE: undoing this because we're counting { chars for MV
				a_mv = isDecimal(a.cost.charAt(1)) ? parseInt(a.cost.substring(1, a.cost.indexOf('}'))) + a.cost.replaceAll('x','').split('{').length - 2 : a.cost.replaceAll('x','').split('{').length - 1;
				b_mv = isDecimal(b.cost.charAt(1)) ? parseInt(b.cost.substring(1, b.cost.indexOf('}'))) + b.cost.replaceAll('x','').split('{').length - 2 : b.cost.replaceAll('x','').split('{').length - 1;
				if (a_mv === b_mv)
				{
					if (a.card_name === b.card_name)
					{
						return 0;
					}
					else {
						return (a.card_name < b.card_name) ? -1 : 1;
					}
				}
				else {
					return (a_mv < b_mv) ? -1 : 1;
				}
			}
			if (sortMode == 'color')
			{
				a_color_index = -1;
				b_color_index = -1;

				for (let i = 0; i < color_sort_order.length; i++)
				{
					if (a.color.toLowerCase().split('').sort().join('') == color_sort_order[i].toLowerCase().split('').sort().join(''))
					{
						a_color_index = i;
					}
					if (b.color.toLowerCase().split('').sort().join('') == color_sort_order[i].toLowerCase().split('').sort().join(''))
					{
						b_color_index = i;
					}
				}

				if (a_color_index === b_color_index)
				{
					if (a.card_name === b.card_name)
					{
						return 0;
					}
					else {
						return (a.card_name < b.card_name) ? -1 : 1;
					}
				}
				else {
					return (a_color_index < b_color_index) ? -1 : 1;
				}
			}
			if (sortMode == 'rarity')
			{
				rarity_sort_order = [ "mythic", "rare", "uncommon", "common" ];
				a_rarity_index = 100;
				b_rarity_index = 100;

				for (let i = 0; i < rarity_sort_order.length; i++)
				{
					if (a.rarity.toLowerCase() == rarity_sort_order[i])
					{
						a_rarity_index = i;
					}
					if (b.rarity.toLowerCase() == rarity_sort_order[i])
					{
						b_rarity_index = i;
					}
				}

				if (a_rarity_index === b_rarity_index)
				{
					a_color_index = -1;
					b_color_index = -1;

					for (let i = 0; i < color_sort_order.length; i++)
					{
						if (a.color.toLowerCase().split('').sort().join('') == color_sort_order[i].toLowerCase().split('').sort().join(''))
						{
							a_color_index = i;
						}
						if (b.color.toLowerCase().split('').sort().join('') == color_sort_order[i].toLowerCase().split('').sort().join(''))
						{
							b_color_index = i;
						}
					}

					if (a_color_index === b_color_index)
					{
						if (a.card_name === b.card_name)
						{
							return 0;
						}
						else {
							return (a.card_name < b.card_name) ? -1 : 1;
						}
					}
					else {
						return (a_color_index < b_color_index) ? -1 : 1;
					}		
				}
				else {
					return (a_rarity_index < b_rarity_index) ? -1 : 1;
				}
			}
			if (sortMode == 'cube')
			{
				type_sort_order = [ 'Creature', 'Planeswalker', 'Instant', 'Sorcery', 'Artifact', 'Enchantment', 'Battle' ];
				// color, type, MV
				a_color_index = -1;
				b_color_index = -1;

				for (let i = 0; i < color_sort_order.length; i++)
				{
					if (a.color.toLowerCase().split('').sort().join('') == color_sort_order[i].toLowerCase().split('').sort().join(''))
					{
						a_color_index = i;
					}
					if (b.color.toLowerCase().split('').sort().join('') == color_sort_order[i].toLowerCase().split('').sort().join(''))
					{
						b_color_index = i;
					}
				}

				if (a_color_index === b_color_index)
				{
					a_type_index = -1;
					b_type_index = -1;

					for (let i = type_sort_order.length - 1; i >= 0; i--)
					{
						if (a.type.includes(type_sort_order[i]))
						{
							a_type_index = i;
						}
						if (b.type.includes(type_sort_order[i]))
						{
							b_type_index = i;
						}
					}

					if (a_type_index === b_type_index)
					{
						a_mv = isDecimal(a.cost.charAt(1)) ? parseInt(a.cost.substring(1, a.cost.indexOf('}'))) + a.cost.replaceAll('x','').split('{').length - 2 : a.cost.replaceAll('x','').split('{').length - 1;
						b_mv = isDecimal(b.cost.charAt(1)) ? parseInt(b.cost.substring(1, b.cost.indexOf('}'))) + b.cost.replaceAll('x','').split('{').length - 2 : b.cost.replaceAll('x','').split('{').length - 1;
						if (a_mv === b_mv)
						{
							if (a.card_name === b.card_name)
							{
								return 0;
							}
							else {
								return (a.card_name < b.card_name) ? -1 : 1;
							}
						}
						else {
							return (a_mv < b_mv) ? -1 : 1;
						}
					}
					else {
						return (a_type_index < b_type_index) ? -1 : 1;
					}
				}
				else {
					return (a_color_index < b_color_index) ? -1 : 1;
				}
			}
		}